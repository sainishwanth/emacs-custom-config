#+TITLE: Sai's Emacs Config
#+AUTHOR: Sai Nishwanth

* PACKAGE Management

** MELPA Package Manager
  
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-refresh-contents)
  (package-initialize)
#+END_SRC

** Installing Use Package

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
#+END_SRC

** Evil Mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
  (use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
  (use-package evil-tutor)  
#+END_SRC

** General Keybindings

#+BEGIN_SRC emacs-lisp
(use-package general
:ensure t
:config
(general-evil-setup t))
#+END_SRC

** All the Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
  :ensure t)
#+END_SRC

** Emojis
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :ensure t
  :hook (after-init . global-emojify-mode))
#+END_SRC

** Evil-Snipe
#+BEGIN_SRC emacs-lisp
(use-package evil-snipe
:ensure t)
(require 'evil-snipe)
(evil-snipe-mode +1)
(evil-snipe-override-mode +1)
#+END_SRC

** Evil Multiedit
#+BEGIN_SRC emacs-lisp
(use-package evil-multiedit
:ensure t)
(require 'evil-multiedit)
(evil-multiedit-default-keybinds)
#+END_SRC
* Startup Performance

** Garbage Collection
#+BEGIN_SRC emacs-lisp
 ;; Using garbage magic hack.
(use-package gcmh
  :config
  :ensure t
  (gcmh-mode 1))
 ;; Setting garbage collection threshold
 (setq gc-cons-threshold 402653184
     gc-cons-percentage 0.6)

 ;; Profile emacs startup
 (add-hook 'emacs-startup-hook
         (lambda ()
           (message "*** Emacs loaded in %s with %d garbage collections."
                    (format "%.2f seconds"
                            (float-time
                             (time-subtract after-init-time before-init-time)))
                    gcs-done)))

 ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+END_SRC

** Native Compilation
  #+BEGIN_SRC emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (if (boundp 'comp-deferred-compilation)
     (setq comp-deferred-compilation nil)
     (setq native-comp-deferred-compilation nil))
  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq load-prefer-newer noninteractive)
 #+END_SRC

** Buffers and Bookmarks

#+BEGIN_SRC emacs-lisp
 (nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp
 (use-package dashboard
    :init      ;; tweak dashboard config before loading it
    :ensure t
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
(setq dashboard-startup-banner "~/Downloads/chainsawman.jpg")  ;; use custom image as banner
(setq dashboard-image-banner-max-height 252)
(setq dashboard-image-banner-max-width 252)
(setq dashboard-center-content t) ;; set to 't' for centered content
(setq dashboard-items '((recents . 5)
                        (agenda . 5 )
                        (bookmarks . 3)
                        (projects . 3)
                        (registers . 3)))
:config
(dashboard-setup-startup-hook)
(dashboard-modify-heading-icons '((recents . "file-text")
			    (bookmarks . "book"))))
 (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC

** Text Selection

#+BEGIN_SRC emacs-lisp
   (delete-selection-mode t)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
:ensure t)
(use-package dired-open
:ensure t)
(use-package peep-dired
:ensure t)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "d d" '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current")
               "d p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
   
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f f"   '(find-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+END_SRC

** Other Functions
#+BEGIN_SRC emacs-lisp
   (use-package recentf
  :config
  (recentf-mode)
  :ensure t)
(use-package sudo-edit
:ensure t) ;; Utilities for opening files with sudo

(defun dt/show-and-copy-buffer-path ()
  "Show and copy the full path to the current file in the minibuffer."
  (interactive)
  ;; list-buffers-directory is the variable set in dired buffers
  (let ((file-name (or (buffer-file-name) list-buffers-directory)))
    (if file-name
        (message (kill-new file-name))
      (error "Buffer not visiting a file"))))
(defun dt/show-buffer-path-name ()
  "Show the full path to the current file in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message file-name)
          (kill-new file-name))
      (error "Buffer not visiting a file"))))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(global-display-line-numbers-mode 1)
(setq display-line-numbers 'relative)
(global-visual-line-mode t)

(use-package doom-modeline
:ensure t)
(doom-modeline-mode 1)
#+END_SRC

** IVY

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode
  :ensure t))
(use-package ivy
  :defer 0.1
  :diminish
  :ensure t
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))
(use-package ivy-rich
  :after ivy
  :ensure t
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)
  (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+END_SRC

** Smex and MX with Ivy
#+BEGIN_SRC emacs-lisp
  (setq ivy-initial-inputs-alist nil)
  (use-package smex
  :ensure t)
  (smex-initialize)
#+END_SRC

** Ivy-Postframe
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe
  :ensure t
  :init
  (setq ivy-posframe-display-functions-alist
    '((swiper                     . ivy-posframe-display-at-point)
      (complete-symbol            . ivy-posframe-display-at-point)
      (counsel-M-x                . ivy-display-function-fallback)
      (counsel-esh-history        . ivy-posframe-display-at-window-center)
      (counsel-describe-function  . ivy-display-function-fallback)
      (counsel-describe-variable  . ivy-display-function-fallback)
      (counsel-find-file          . ivy-display-function-fallback)
      (counsel-recentf            . ivy-display-function-fallback)
      (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
      (dmenu                      . ivy-posframe-display-at-frame-top-center)
      (nil                        . ivy-posframe-display))
    ivy-posframe-height-alist
    '((swiper . 20)
      (dmenu . 20)
      (t . 10)))
  :config
  (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

* Language Support

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
  :ensure t)
  (use-package lua-mode
  :ensure t)
  (use-package markdown-mode
  :ensure t)
  (use-package python-mode
  :ensure t)
#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
  
  (setq bare-git-dir (concat "--git-dir=" (expand-file-name "~/.dotfiles")))
  (setq bare-work-tree (concat "--work-tree=" (expand-file-name "~")))
  ;; use maggit on git bare repos like dotfiles repos, don't forget to change `bare-git-dir' and `bare-work-tree' to your needs
  (defun me/magit-status-bare ()
    "set --git-dir and --work-tree in `magit-git-global-arguments' to `bare-git-dir' and `bare-work-tree' and calls `magit-status'"
    (interactive)
    (require 'magit-git)
    (add-to-list 'magit-git-global-arguments bare-git-dir)
    (add-to-list 'magit-git-global-arguments bare-work-tree)
    (call-interactively 'magit-status))

  ;; if you use `me/magit-status-bare' you cant use `magit-status' on other other repos you have to unset `--git-dir' and `--work-tree'
  ;; use `me/magit-status' insted it unsets those before calling `magit-status'
  (defun me/magit-status ()
    "removes --git-dir and --work-tree in `magit-git-global-arguments' and calls `magit-status'"
    (interactive)
    (require 'magit-git)
    (setq magit-git-global-arguments (remove bare-git-dir magit-git-global-arguments))
    (setq magit-git-global-arguments (remove bare-work-tree magit-git-global-arguments))
    (call-interactively 'magit-status))

  (use-package magit
  :ensure t)
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/Org/"
      org-agenda-files '("~/Org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      org-log-done 'time
      org-journal-dir "~/Org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+END_SRC

** Org Stuff

#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :ensure t)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    ;; An example of how this works.
  ;; [[arch-wiki:Name_of_Page][Description]]
  (setq org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
	  '(("google" . "http://www.google.com/search?q=")
	    ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
	    ("ddg" . "https://duckduckgo.com/?q=")
	    ("wiki" . "https://en.wikipedia.org/wiki/")))

  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
	'((sequence
	   "TODO(t)"           ; A task that is ready to be tackled
	   "BLOG(b)"           ; Blog writing assignments
	   "GYM(g)"            ; Things to accomplish at the gym
	   "PROJ(p)"           ; A project that contains other tasks
	   "VIDEO(v)"          ; Video assignments
	   "WAIT(w)"           ; Something is holding up this task
	   "|"                 ; The pipe necessary to separate "active" states and "inactive" states
	   "DONE(d)"           ; Task has been completed
	   "CANCELLED(c)" )))  ; Task has been cancelled

  (setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
#+END_SRC

* Scrolling

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
  (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+END_SRC

* Shell

** Eshell
#+BEGIN_SRC emacs-lisp
  (nvmap :prefix "SPC"
	 "e h"   '(counsel-esh-history :which-key "Eshell history")
	 "e s"   '(eshell :which-key "Eshell"))
  (use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
:ensure t)
(setq shell-file-name "/bin/fish"
      vterm-max-scrollback 5000)
#+END_SRC
